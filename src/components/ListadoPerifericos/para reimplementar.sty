//Función para añadir el valor del contador a la planilla del remito
    const AgregarPerifericos = () => {
        /*Renderiza la tabla de perifericos*/
        setShowTable(true)
        /* crea un nuevo ID para cada fila */
        const nuevoId = id + 1
        setId(nuevoId)

        /*Carga un nuevo periferico sin borrar el anterior*/
        setItemsPerifericos((itemsPerifericos) => [
            ...itemsPerifericos,
            {
                id: id,
                periferico: perifericoSeleccionado,
                marca: marcaSeleccionada,
                modelo: modeloSeleccionado,
                garantia: garantiaSeleccionada,
                cantidad: cantidadSeleccionada,
                comentarios: comentarioPeriferico
            }
        ]);


        /*Vacía los inputs para que se pueda seleccionar un periferico nuevo */
        setPerifericoSeleccionado('');
        setMarcaSeleccionada('');
        setModeloSeleccionado('');
        setGarantiaSeleccionada('');
        setComentarioPeriferico('');
        setCantidadSeleccionada(0)

        setSelectedValuePerif({ label: 'Periférico', value: '' });
        setSelectedValueMarca({ label: 'Marca', value: '' });
        setSelectedValueMod({ label: 'Modelo', value: '' });

    }

   
    


     // Función para manejar el cambio en la selección del periférico
     const handlePerifericoChange = (selectedPeriferico) => {
        setPerifericoSeleccionado(selectedPeriferico.value);
        setPerifId(selectedPeriferico.perifId)
    };

    useEffect(() => {
        if (perifId) {
            setPerifId(perifId)
        }
    }, [perifId]);

    // Función para manejar el cambio en la selección de la marca
    const handleMarcaChange = (selectedMarca) => {
        setMarcaSeleccionada(selectedMarca.value);
        setMarcaId(selectedMarca.marcaId)
    };

    // Función para manejar el cambio en la selección del modelo
    const handleModeloChange = (selectedModelo) => {
        setModeloSeleccionado(selectedModelo.value);
        setModeloId(selectedModelo.modeloId);
    }
    // useEffect para actualizar el valor de modeloId cada vez que cambia
    useEffect(() => {
        if (modeloId) {
            setModeloId(modeloId)
        }
    }, [modeloId])